Date:26/08/2022

Parallel Array Sorting:
-java provide a method which is used to solve array elements parallel
-this method has added to java.util.Arrays class,method is parallelSort() which provides sorting of array parallel
-this method is overloaded for all the primitive data types and comparable object

Optional class:
-it is final class and used to deal with NullPointerException in java
-it provides methods which are used to check the presence of values for particular variable


Lambda Expression(method/function/Anonymous method):
-it can be used when u don't want to reuse method,u want to use that method only once.
-It is Anonymous Function that does have a name and does not belong to any class
-it means it is function without method declaration i.e. access modifier,return type,and method name
-it is useful in places where a method is being used only one and method definition is short
-it allows you to write a method in the same place you are going to use it
-it saves  your effort of declaring and writing a separate method to the containing class
-if you want to use lambda expression u need functional interface to bind lambda with object because java is object oriented language it does not support only functions
-in java ,lambda expression are represented as object and they must be bound to particular object type known as Functional Interface

Functional Interface:
-It is an Interface which contains only one abstract method Ex.Runnable ,comparator,comparable(these contains only one abstract method)

syntax for lambda:
	(arguments)->(body)
	ex.(a,b)->a+b;
	(String str)->syso(str);
	
Rules for lambda:	
	1.It can have 0,1 or more parameters
	2.type of parameter can be explicitly declared or it can be inferred from the context
	ex.(int a) is same as(a)
	3.when there is single parameter it is not mandatory to use parenthesis
	ex.a->a*a;
	4.Body of lambda expression can contain one or more statement
	5.if body of lambda expression has single statement curly brackets are not mandatory
	
forEach method:
objOfCollection.forEach(lambda);
	-consumer is inbuilt interface .to implement it we need lambda expression in forEach method
	
implementation of comparator interface using lambda:
we can pass lambda expression in sort method	i.e.Collections.sort(list,lambdaExpression)
comparator has only one abstract method :compare method
and string is already comparable so we can use compareTo method for sorting of String parameters
	
practice Q:
these questions solved in Square class file in java8features package.
1.create a functional interface with a method square(int n) and implement the lambda expression
2.create a functional interface with a method circle(float r)and implement the  lambda expression
3.create a functional interface with a method simpleInterest(float p,float n, float r)and implement lambda expression
4.create a functional interface with a method percentage(double m1 ,double m2, double m3)and implement lambda expression
	
Date:29/08/2022
Stream API:
-Stream is used to process collection of object
-Sequence of object that supports various methods that can be pipelined to produce the desired result
-if we want to represent the group of objects as a single entity then we should go for collection.
But if we want to process object from the collection then we should go for Stream.
 
 How to create Stream?
 -create a stream
 -perform intermediate operations on the initial stream.there can be more than 1 intermediate operations
 -perform terminal operations

Predicate:
-predicate is inbuilt functional interface.using that we can add criteria to filter your data
methods of stream to check predicate:
1.anyMatch();
it return true if any elements of the stream matches the given predicate

2.noneMatch();
it is opposite of anyMatch returns true if none of the stream elements matches the given predicate

3.allMatch();
it returns true if all the stream elements matches the given predicate else it returns false
return type of all above method is boolean


features of stream:
-Stream is not a data structure instead it takes input from collection,array etc. i.e.it do not store any data
-Stream do not change the original data structure ,they only provide the result as per pipeline methods
-Each intermediate operations is lazily executed and returns a stream as a result,hence various intermediate operations can be pipelined	
-terminal operations mark the end of the stream and returns the result.
lazily executed:if we get result at some specific iterations so it will not iterate for remaining iterations

Parallel execution of operations using stream is faster than sequential execution of operation

method Reference:
-it is a short hand notation of lambda expression to call a method
ex.str->syso(str);
u can replace above lambda expression with method reference
ex.System.out::println

-this :: double colon operator is used in method reference to separate the class or object from the method name
	
Date and Time API:
Before java8 there was a java.util.Date class to create and handle date and time but that has some limitations	
Drawbacks of old API:

1.thread Safety:
-existing classes such as date and calendar does not provide thread safety hence it leads to concurrency issue that are needed to be taken care by developer
-new date /time API provides thread safety and are immutable,hence avoiding concurrency issue from developers

2.Bad API Designing:	
-Date and Calendar does not provide methods to perform basic day to day functionality,but java8 classes provides different methods for performing
operations regarding date,time,duration and period

3.Difficult time zone handling:
-to handle the time zone using Date and calendar classes is difficult because developers were supposed to write logic for that,with new API time Zone handling
can be easily done with ZonedDateTime API.
	
LocalDate class:it is immutable class that represent date with a default format of yyyy-MM-dd	

LocalTime class:it is an immutable class that represents time with default format of hour -min- sec
	
LocalDateTime class:it is immutable date time class that represent the date time in default format as yyyy-MM-dd hh-mm-ss.zzz
zzz means time zone

ZonedDateTime:it is immutable class date time with time zone


Install maven and gradle:
core java 8:module 161 to 164

core java mini projects:  
Library Mgmt System
Hotel Mgmt system
Hospital Mgmt System
Student Information System
ATM Machine
Salary Magmt System
Career Information Mgmt System
Course Mgmt System
Event Mgmt System
Electricity Billing System
Book store Mgmt
Medical Mgmt system
Stock Mgmt system
Telephone Billing System
Travel Mgmt System
Campain Mgmt System
University Admission Mgmt System
Content Mgmt System
Student Result Processing system
Labour Mgmt system

	
Practice Q:
Write a program to find whether the given number is a 3/5 Number.
 
A number is a 3/5 Number if the product of the digits in the number is divisible by 3 or 5.
 
Include a function named divisibleByThreeFive that accepts an integer argument and returns an integer. The function returns
1.	1 if it is a 3/5 Number
2.	0 if it is not a 3/5 Number
3.	-1 if it is a negative number
 
Input and Output Format:
Input consists of a single integer.
Output consists of a string.
Refer sample output for formatting specifications.
 
 
Sample Input 1:
251
 
Sample Output 1:
yes
 
Sample Input 2:
241
 
Sample Output 2:
no
 
Sample Input 3:
-9
 
Sample Output 3:
Invalid Input


Q.2
Write a program to find whether the given number is a 3/5 Number.
 
A number is a 3/5 Number if the product of the digits in the number is divisible by 3 or 5.
 
Include a function named divisibleByThreeFive that accepts an integer argument and returns an integer. The function returns
1.	1 if it is a 3/5 Number
2.	0 if it is not a 3/5 Number
3.	-1 if it is a negative number
 
Input and Output Format:
Input consists of a single integer.
Output consists of a string.
Refer sample output for formatting specifications.
 
 
Sample Input 1:
251
 
Sample Output 1:
yes
 
Sample Input 2:
241
 
Sample Output 2:
no
 
Sample Input 3:
-9
 
Sample Output 3:
Invalid Input

Q.3:
Read the question carefully and follow the input and output format.

Given an integer array. The first index represents the Student id, Second index represents C-programming marks and the third index Represents SQL marks. 
Write a program to find the Ids of students who have cleared both C-programming and SQL.

Note :(1) The Pass Marks is >=70

Input and Output Format :

First line of input consists of n, the number of elements. Next n lines correspond to the array elements. Output consist of an integer array.

1) Print "Invalid array size" when size of the array is negative and terminate the program.
2) Print "Invalid input" when there is any negative number available in the input array and terminate the program.

Include a function named clearedStage1(int array[], int size) whose return type is void.
The output array is stored in a instance variable named cleared.
Sample Input 1:
9
1
25
75
3
75
80
2
75
75

Sample Output 1:
3
2

Sample Input 2:
6
4
25
-78

Sample Output 2:
Invalid input
	
	
	
	
	
	
	